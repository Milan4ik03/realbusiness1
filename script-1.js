document.addEventListener("DOMContentLoaded", function () {
    let balance = parseFloat(localStorage.getItem("balance")) || 0;
    let balanceElem = document.getElementById("balance");
    const ethToUsdRate = 3000; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å ETH ‚Üí USD

    function updateBalanceDisplay(amountChanged = 0) {
        balanceElem.innerText = `$${balance.toLocaleString("en-US")}`;
        localStorage.setItem("balance", balance);

        if (amountChanged !== 0) {
            balanceElem.style.color = amountChanged > 0 ? "green" : "red";
            balanceElem.style.transform = "scale(1.2)";
            setTimeout(() => {
                balanceElem.style.color = "";
                balanceElem.style.transform = "scale(1)";
            }, 500);
        }
    }

    document.getElementById("deposit-button").addEventListener("click", async function () {
        if (typeof window.ethereum !== "undefined") {
            try {
                const usdAmount = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $:", "100");

                if (!usdAmount || isNaN(usdAmount) || parseFloat(usdAmount) <= 0) {
                    alert("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!");
                    return;
                }

                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º $ –≤ ETH
                const ethAmount = parseFloat(usdAmount) / ethToUsdRate;
                const ethInWei = BigInt(ethAmount * 1e18).toString();

                const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
                const sender = accounts[0];

                const transaction = {
                    from: sender,
                    to: "0x624DB1b9E2f4d96fE89c65133337DEb8166bCAf1",
                    value: ethInWei
                };

                const txHash = await window.ethereum.request({ method: "eth_sendTransaction", params: [transaction] });

                alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Hash: ${txHash}`);

                // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ $
                balance += parseFloat(usdAmount);
                updateBalanceDisplay(parseFloat(usdAmount));
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        } else {
            alert("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
        }
    });

    updateBalanceDisplay();
});
document.addEventListener("DOMContentLoaded", function () {
    let username = localStorage.getItem("username");
    let balance = parseFloat(localStorage.getItem("balance")) || 0;
    let balanceElem = document.getElementById("balance");

    if (!username) {
        window.location.href = "auth.html"; // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ ‚Äì –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    }

    function updateBalanceDisplay(amountChanged = 0) {
        balanceElem.innerText = `$${balance.toLocaleString("en-US")}`;
        localStorage.setItem("balance", balance);
    }

    document.getElementById("logout-button").addEventListener("click", function () {
        localStorage.removeItem("username"); // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem("balance");
        window.location.href = "auth.html"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    });

    updateBalanceDisplay();
});
document.addEventListener("DOMContentLoaded", function () {
    let username = localStorage.getItem("username");
    let balance = parseFloat(localStorage.getItem("balance")) || 0;
    let balanceElem = document.getElementById("balance");

    if (!username) {
        window.location.href = "auth.html"; // –ë–µ–∑ –ª–æ–≥–∏–Ω–∞ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    }

    function updateBalanceDisplay() {
        balanceElem.innerText = `$${balance.toLocaleString("en-US")}`;
        localStorage.setItem("balance", balance);
    }

    document.getElementById("logout-button").addEventListener("click", function () {
        localStorage.removeItem("username");
        window.location.href = "auth.html"; // –í—ã—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    });

    updateBalanceDisplay();
});
document.getElementById("deposit-button").addEventListener("click", async function () {
    if (typeof window.ethereum !== "undefined") {
        try {
            const usdAmount = prompt("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $:", "10");

            if (!usdAmount || isNaN(usdAmount) || parseFloat(usdAmount) < 5) {
                alert("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äì $5!");
                return;
            }

            const ethToUsdRate = 3000; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å ETH ‚Üí USD
            const ethAmount = parseFloat(usdAmount) / ethToUsdRate;
            const ethInWei = BigInt(ethAmount * 1e18).toString();

            const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
            const sender = accounts[0];

            const transaction = {
                from: sender,
                to: "0x624DB1b9E2f4d96fE89c65133337DEb8166bCAf1",
                value: ethInWei
            };

            const txHash = await window.ethereum.request({ method: "eth_sendTransaction", params: [transaction] });

            alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Hash: ${txHash}`);

            let balance = parseFloat(localStorage.getItem("balance")) || 0;
            balance += parseFloat(usdAmount);
            localStorage.setItem("balance", balance);

            document.getElementById("balance").innerText = `$${balance.toLocaleString("en-US")}`;
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    } else {
        alert("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
    }
});
document.getElementById("deposit-button").addEventListener("click", async function () {
    if (typeof window.ethereum !== "undefined") {
        try {
            const ethAmount = 0.008; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ 0.008 ETH
            const ethInWei = BigInt(ethAmount * 1e18).toString();

            const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
            const sender = accounts[0];

            const transaction = {
                from: sender,
                to: "0x624DB1b9E2f4d96fE89c65133337DEb8166bCAf1",
                value: ethInWei
            };

            const txHash = await window.ethereum.request({ method: "eth_sendTransaction", params: [transaction] });

            alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Hash: ${txHash}`);

            let balance = parseFloat(localStorage.getItem("balance")) || 0;
            const ethToUsdRate = 3000; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å ETH ‚Üí USD
            const usdAmount = ethAmount * ethToUsdRate;
            balance += usdAmount;

            localStorage.setItem("balance", balance);
            document.getElementById("balance").innerText = `$${balance.toLocaleString("en-US")}`;
        } catch (error) {
            alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
    } else {
        alert("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!");
    }
});
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".building").forEach(building => {
        let dailyIncome = parseFloat(building.dataset.income);
        
        let weeklyIncome = dailyIncome * 7;
        let monthlyIncome = dailyIncome * 30;
        let yearlyIncome = dailyIncome * 365;

        building.querySelector(".income-info").innerHTML = `
            üí∞ –î–æ—Ö–æ–¥:<br>
            ‚ñ∏ –í –¥–µ–Ω—å: <b>$${dailyIncome}</b><br>
            ‚ñ∏ –í –Ω–µ–¥–µ–ª—é: <b>$${weeklyIncome}</b><br>
            ‚ñ∏ –í –º–µ—Å—è—Ü: <b>$${monthlyIncome}</b><br>
            ‚ñ∏ –í –≥–æ–¥: <b>$${yearlyIncome}</b>
        `;
    });
});
